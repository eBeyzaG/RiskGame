/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package riskclient;

import java.awt.CardLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.List;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import riskclient.model.Region;

/**
 *
 * @author beyza
 */
public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientFrame
     */
    Client cli;
    CardLayout cardLayout;
    DefaultListModel region_dlm;
    int turn_count = 0;

    static ArrayList<BufferedImage> region_images;

    Region attacked_region;
    Region attacking_region;
    int attacked_troop_count = 0;
    int defending_troop_count;
    BufferedImage bi;

    public ClientFrame(Client c) {

        cli = c;
        region_images = c.board.getRegion_images();
        initComponents();

        try {
            BufferedImage mm_pic = ImageIO.read(new File("src\\riskclient\\images\\main.png"));
            jLabel7.setIcon(new ImageIcon(mm_pic));
        } catch (IOException ex) {
            Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        start_button.setEnabled(false);
        main_menu_message.setText("Pair to start playing. Enter your pair's ID.");
        this.setContentPane(MainMenu);
        MainMenu.setVisible(true);
        revalidate();
        repaint();

        while (cli.clientId == -1);
        your_id.setText("Your ID: " + cli.clientId + "");
        region_dlm = new DefaultListModel();
        load_region_list();
        setMessageBox("Pair to start playing.");
        this.chooseButton.setEnabled(false);
        //remove(jButton2);
        pass_button.setVisible(false);
        setCheckBoxesVisible(false);

    }

    public void setMessageBox(String s) {
        messageBox.setText(s);
    }

    public synchronized void load_region_list() {//updates the list and map on frame in another thread and locks the method
        //to avoid conflliction

        javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {

                region_dlm.removeAllElements();

                for (Region r : cli.board.getRegions()) {
                    if (r.getOwner().equals("player")) {
                        region_dlm.addElement("Region " + r.getName() + "    YOURS       " + r.getTroop_count());
                    } else if (r.getOwner().equals("rival")) {
                        region_dlm.addElement("Region " + r.getName() + "    RIVALS      " + r.getTroop_count());
                    } else {
                        region_dlm.addElement("Region " + r.getName() + "    EMPTY       " + r.getTroop_count());
                    }

                }
                regionList.setModel(region_dlm);
                jPanel2.repaint();
                return;
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        count_boxes = new javax.swing.ButtonGroup();
        Game = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel(){

            @Override
            public void paintComponent(Graphics g)

            {
                super.paintComponent(g);
                try {
                    bi = ImageIO.read(new File("C:\\Users\\beyza\\OneDrive\\Belgeler\\GitKlones\\RiskGame\\RiskClient\\src\\riskclient\\images\\map.png"));
                } catch (IOException ex) {
                    Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                g.drawImage(bi, 0, 0, this);
                for(BufferedImage bim: ClientFrame.region_images){
                    g.drawImage(bim, 0, 0, this);
                }

            }};
            jLabel4 = new javax.swing.JLabel();
            jCheckBox3 = new javax.swing.JCheckBox();
            jCheckBox2 = new javax.swing.JCheckBox();
            jCheckBox1 = new javax.swing.JCheckBox();
            troop_count_label = new javax.swing.JLabel();
            jLabel3 = new javax.swing.JLabel();
            messageBox = new javax.swing.JLabel();
            chooseButton = new javax.swing.JButton();
            jLabel1 = new javax.swing.JLabel();
            jScrollPane1 = new javax.swing.JScrollPane();
            regionList = new javax.swing.JList<>();
            pass_button = new javax.swing.JButton();
            MainMenu = new javax.swing.JPanel();
            start_button = new javax.swing.JButton();
            jLabel5 = new javax.swing.JLabel();
            jLabel6 = new javax.swing.JLabel();
            pairButton = new javax.swing.JButton();
            pair_text = new javax.swing.JTextField();
            your_id = new javax.swing.JLabel();
            main_menu_message = new javax.swing.JLabel();
            jLabel7 = new javax.swing.JLabel();

            setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
            setTitle("Risk Game");
            setPreferredSize(new java.awt.Dimension(1100, 800));
            getContentPane().setLayout(new java.awt.CardLayout());

            jLabel2.setFont(new java.awt.Font("Consolas", 1, 48)); // NOI18N
            jLabel2.setText("RISK");

            jPanel2.setPreferredSize(new java.awt.Dimension(450, 450));

            javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
            jPanel2.setLayout(jPanel2Layout);
            jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 450, Short.MAX_VALUE)
            );
            jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 450, Short.MAX_VALUE)
            );

            jLabel4.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            jLabel4.setText("Owner");

            count_boxes.add(jCheckBox3);
            jCheckBox3.setText("3");
            jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox3ActionPerformed(evt);
                }
            });

            count_boxes.add(jCheckBox2);
            jCheckBox2.setText("2");
            jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox2ActionPerformed(evt);
                }
            });

            count_boxes.add(jCheckBox1);
            jCheckBox1.setText("1");
            jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jCheckBox1ActionPerformed(evt);
                }
            });

            troop_count_label.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N

            jLabel3.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            jLabel3.setText("Troop Count");

            messageBox.setFont(new java.awt.Font("Consolas", 1, 24)); // NOI18N

            chooseButton.setText("CHOOSE");
            chooseButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    chooseButtonActionPerformed(evt);
                }
            });

            jLabel1.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            jLabel1.setText("Region");

            regionList.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            regionList.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    regionListMouseReleased(evt);
                }
            });
            jScrollPane1.setViewportView(regionList);

            pass_button.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
            pass_button.setText("PASS");
            pass_button.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pass_buttonActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout GameLayout = new javax.swing.GroupLayout(Game);
            Game.setLayout(GameLayout);
            GameLayout.setHorizontalGroup(
                GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GameLayout.createSequentialGroup()
                    .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(GameLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(troop_count_label, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(GameLayout.createSequentialGroup()
                            .addGap(484, 484, 484)
                            .addComponent(jLabel2))
                        .addGroup(GameLayout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(GameLayout.createSequentialGroup()
                                    .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(GameLayout.createSequentialGroup()
                                            .addGap(41, 41, 41)
                                            .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(GameLayout.createSequentialGroup()
                                                    .addComponent(jLabel1)
                                                    .addGap(49, 49, 49)
                                                    .addComponent(jLabel4)
                                                    .addGap(29, 29, 29)
                                                    .addComponent(jLabel3))
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(GameLayout.createSequentialGroup()
                                            .addGap(118, 118, 118)
                                            .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(pass_button, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(chooseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(GameLayout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(jCheckBox1)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jCheckBox2)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(jCheckBox3)))))
                                    .addGap(199, 199, 199)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(messageBox, javax.swing.GroupLayout.PREFERRED_SIZE, 1050, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addContainerGap(79, Short.MAX_VALUE))
            );
            GameLayout.setVerticalGroup(
                GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GameLayout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jLabel2)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(messageBox, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(GameLayout.createSequentialGroup()
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(40, 40, 40)
                            .addComponent(troop_count_label, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(GameLayout.createSequentialGroup()
                            .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooseButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(GameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jCheckBox1)
                                .addComponent(jCheckBox2)
                                .addComponent(jCheckBox3))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pass_button)
                            .addGap(54, 54, 54)))
                    .addGap(84, 84, Short.MAX_VALUE))
            );

            getContentPane().add(Game, "card2");

            MainMenu.setPreferredSize(new java.awt.Dimension(1042, 621));

            start_button.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            start_button.setText("START GAME");
            start_button.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    start_buttonActionPerformed(evt);
                }
            });

            jLabel5.setFont(new java.awt.Font("Consolas", 1, 72)); // NOI18N
            jLabel5.setText("RISK");

            jLabel6.setFont(new java.awt.Font("Consolas", 1, 12)); // NOI18N
            jLabel6.setText("Beyza Gürer 2021");

            pairButton.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            pairButton.setText("Pair");
            pairButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pairButtonActionPerformed(evt);
                }
            });

            pair_text.setFont(new java.awt.Font("Consolas", 0, 18)); // NOI18N
            pair_text.setText("Pair ID");
            pair_text.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    pair_textMouseClicked(evt);
                }
            });
            pair_text.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    pair_textActionPerformed(evt);
                }
            });

            your_id.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            your_id.setText("jLabel3");

            main_menu_message.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
            main_menu_message.setText("jLabel7");
            main_menu_message.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

            jLabel7.setText("jLabel7");

            javax.swing.GroupLayout MainMenuLayout = new javax.swing.GroupLayout(MainMenu);
            MainMenu.setLayout(MainMenuLayout);
            MainMenuLayout.setHorizontalGroup(
                MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                    .addContainerGap(291, Short.MAX_VALUE)
                    .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(282, 282, 282))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                                .addComponent(main_menu_message, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(336, 336, 336)))
                        .addGroup(MainMenuLayout.createSequentialGroup()
                            .addGap(129, 129, 129)
                            .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(MainMenuLayout.createSequentialGroup()
                                    .addComponent(pair_text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(pairButton))
                                .addComponent(your_id, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(MainMenuLayout.createSequentialGroup()
                                    .addComponent(start_button, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(3, 3, 3)))
                            .addGap(48, 48, 48))))
                .addGroup(MainMenuLayout.createSequentialGroup()
                    .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(MainMenuLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(MainMenuLayout.createSequentialGroup()
                            .addGap(491, 491, 491)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            MainMenuLayout.setVerticalGroup(
                MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainMenuLayout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(your_id, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(MainMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pairButton)
                        .addComponent(pair_text, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(3, 3, 3)
                    .addComponent(main_menu_message, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(start_button, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(46, 46, 46)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap())
            );

            getContentPane().add(MainMenu, "card3");

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void pairButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pairButtonActionPerformed
        // sends wanted pair id to server

        main_menu_message.setText("Pairing...");
        try {
            if (Integer.parseInt(pair_text.getText()) != this.cli.clientId
                    && !pair_text.getText().equals("")) {
                SendMessage msg = new SendMessage("pair");
                msg.setToId(Integer.parseInt(pair_text.getText()));
                msg.setWanted_pair_id(Integer.parseInt(pair_text.getText()));
                this.cli.sendMessage(msg);
                start_button.setEnabled(true);
            } else {
                main_menu_message.setText("Invalid ID");
                pair_text.setText("     ");
            }
        } catch (Exception e) {
            main_menu_message.setText("Invalid ID");
            pair_text.setText("     ");
        }


    }//GEN-LAST:event_pairButtonActionPerformed

    private void pair_textActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pair_textActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_pair_textActionPerformed

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseButtonActionPerformed
        // TODO add your handling code here:

        if (Client.game_part.equals("choose_regions")) {
            String regionLetter = this.regionList.getSelectedValue().toString().charAt(7) + "";

            for (Region r : this.cli.board.getRegions()) {
                if ((regionLetter.equals(r.getName())) && (!r.getOwner().equals("empty"))) {
                    setMessageBox("This region is already chosen.");
                    return;
                }
            }

            cli.board.updateBoard(regionLetter, 1, "player");
            this.load_region_list();
            SendMessage newMsg = new SendMessage("first_part");
            newMsg.setChosen_region_name(regionLetter);
            cli.sendMessage(newMsg.toString());
            this.messageBox.setText("Wait for other player's turn.");
            this.chooseButton.setEnabled(false);
            Client.turn_count++;

        } else if (Client.game_part.equals("locate_troops")) {
            //start_attack_part();
            this.messageBox.setText("Wait for other player's turn.");
            SendMessage newMsg = new SendMessage("locate_troops");
            newMsg.setBoard_info(this.cli.board.send_board_info(this.cli.clientId, "null", 0, "null"));
            this.cli.sendMessage(newMsg.toString());

        } else if (Client.game_part.equals("attack_part")) {
            if (attacking_region.getTroop_count() <= attacked_troop_count) {
                setMessageBox("You do not have enough troops in Region " + attacking_region.getName());
                return;
            } else {
                chooseButton.setEnabled(true);
                pass_button.setEnabled(false);
                String board_info = this.cli.board.send_board_info(this.cli.clientId, attacked_region.getName(), attacked_troop_count, attacking_region.getName());
                SendMessage newMsg = new SendMessage("attack");
                newMsg.setBoard_info(board_info);
                this.cli.sendMessage(newMsg.toString());
                this.messageBox.setText("Wait for other player's defense.");

            }

        } else if (Client.game_part.equals("defending")) {

            if (attacked_region.getTroop_count() < defending_troop_count) {
                setMessageBox("You do not have enough troops in Region " + attacking_region.getName());
                return;
            } else {
                chooseButton.setEnabled(true);
                setCheckBoxesVisible(false);
                String result = this.cli.board.fight(attacking_region, attacked_troop_count, attacked_region, defending_troop_count);
                load_region_list();
                setMessageBox(result);
                String board_info = this.cli.board.send_board_info(this.cli.clientId, "null", 0, "null");
                SendMessage newMsg = new SendMessage("defend");
                newMsg.setMessage(result);
                newMsg.setBoard_info(board_info);
                this.cli.sendMessage(newMsg.toString());
            }

        } else if (Client.game_part.equals("relocate_troops")) {
            if (this.cli.board.check_finish().equals("player")) {
                setMessageBox("YOU WON!");
                SendMessage newMsg = new SendMessage("game_over");
                newMsg.setMessage("LOSE...");
                this.cli.sendMessage(newMsg.toString());
                chooseButton.setText("RESTART");
                chooseButton.setEnabled(true);
                Client.game_part = "restart";
                return;
            } else if (this.cli.board.check_finish().equals("rival")) {
                setMessageBox("YOU LOSE...");
                SendMessage newMsg = new SendMessage("game_over");
                newMsg.setMessage("WIN!");
                this.cli.sendMessage(newMsg.toString());
                chooseButton.setText("RESTART");
                chooseButton.setEnabled(true);
                Client.game_part = "restart";
                return;
            } else {
                String board_info = this.cli.board.send_board_info(this.cli.clientId, "null", 0, "null");
                SendMessage newMsg = new SendMessage("start_turn");
                newMsg.setMessage("start_turn");
                newMsg.setBoard_info(board_info);
                this.cli.sendMessage(newMsg.toString());
            }
        } else if (Client.game_part.equals("second_locate_troops")) {
            setMessageBox("Choose the region to attack.");
            start_attack_part();
            return;
        } else if (Client.game_part.equals("restart")) {
            restart_game();
            return;
        }

        chooseButton.setEnabled(false);

    }//GEN-LAST:event_chooseButtonActionPerformed

    void restart_game() {
        //restarts game by cleaning old information and creating new client
        Client.game_part = "choose_regions";
        Client.turn_count = 0;
        ClientFrame.region_images.clear();
        this.setVisible(false);
        cli.client_listening_server.interrupt();
        this.dispose();
        new Client("127.0.0.1", 5000);
    }

    private void regionListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_regionListMouseReleased
        // shows and activates the options when clicked on the list dependent on the game part 
        try {
            String regionLetter = this.regionList.getSelectedValue().toString().charAt(7) + "";
            System.out.println(regionLetter);
            if (Client.game_part.equals("locate_troops") || Client.game_part.equals("relocate_troops") || Client.game_part.equals("second_locate_troops")) {

                for (Region r : this.cli.board.getRegions()) {
                    if (r.getName().equals(regionLetter) && r.getOwner().equals("player")) {

                        JPopupMenu troop_menu = new JPopupMenu();

                        if (r.getTroop_count() != 1) {
                            JMenuItem jmi2 = new JMenuItem("-1");
                            jmi2.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent ae) {

                                    cli.board.updateBoard(r.getName(), r.getTroop_count() - 1, "player");
                                    cli.total_troop_count += 1;
                                    load_region_list();
                                    setTroop_count_label(cli.total_troop_count + "");
                                }
                            });
                            troop_menu.add(jmi2);
                        }

                        for (int i = 1; i <= cli.total_troop_count; i++) {
                            JMenuItem jmi = new JMenuItem(i + "");
                            jmi.addActionListener(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent ae) {
                                    cli.board.updateBoard(r.getName(), r.getTroop_count() + Integer.parseInt(jmi.getText()), "player");
                                    cli.total_troop_count -= Integer.parseInt(jmi.getText());
                                    load_region_list();
                                    setTroop_count_label(cli.total_troop_count + "");
                                }
                            });
                            troop_menu.add(jmi);
                        }

                        if (evt.getButton() == 1) {
                            troop_menu.show(evt.getComponent(), evt.getX(), evt.getY());
                        }

                        break;

                    }
                }

            } else if (Client.game_part.equals("attack_part")) {
                JPopupMenu neighbor_region_menu = new JPopupMenu();

                for (Region r : this.cli.board.getRegions()) {
                    if (r.getName().equals(regionLetter) && r.getOwner().equals("player")) {
                        for (Region r2 : r.getNeighbor_regions()) {
                            if (r2.getOwner().equals("rival")) {
                                JMenuItem jmi = new JMenuItem(r2.getName());
                                jmi.addActionListener(new ActionListener() {
                                    @Override
                                    public void actionPerformed(ActionEvent ae) {
                                        System.out.println("Saldırılacak neighbor seçildi " + r2.getName() + " " + r2.getOwner());
                                        setMessageBox("<html>You are choosing to attack Region " + r2.getName() + " from Region " + r.getName()
                                                + ".<br/>Choose troop count and attack.</html>");
                                        setCheckBoxesVisible(true);

                                        attacked_region = r2;
                                        attacking_region = r;
                                    }
                                });
                                neighbor_region_menu.add(jmi);
                            }
                        }
                        if (evt.getButton() == 1) {
                            neighbor_region_menu.show(evt.getComponent(), evt.getX(), evt.getY());
                        }
                        break;
                    }

                }

            }
        } catch (Exception e) {
            load_region_list();
        }

    }//GEN-LAST:event_regionListMouseReleased

    // checkboxes to choose troop count

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:

        if (Client.game_part.equals("defending")) {
            defending_troop_count = 1;
        } else {
            attacked_troop_count = 1;
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        // TODO add your handling code here:
        if (Client.game_part.equals("defending")) {
            defending_troop_count = 2;
        } else {
            attacked_troop_count = 2;
        }
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
        if (Client.game_part.equals("defending")) {
            defending_troop_count = 3;
        } else {
            attacked_troop_count = 3;
        }
    }//GEN-LAST:event_jCheckBox3ActionPerformed

    private void pass_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pass_buttonActionPerformed
        // finishes attackin part
        setCheckBoxesVisible(false);
        pass_button.setVisible(false);
        start_final_part();

    }//GEN-LAST:event_pass_buttonActionPerformed

    private void pair_textMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pair_textMouseClicked
        // TODO add your handling code here:
        pair_text.setText("");
    }//GEN-LAST:event_pair_textMouseClicked

    private void start_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_buttonActionPerformed
        // starts the game panel
        this.setContentPane(Game);
        MainMenu.setVisible(false);
        Game.setVisible(true);

    }//GEN-LAST:event_start_buttonActionPerformed

    public void setTroop_count_label(String troop_count_label) {
        this.troop_count_label.setText("Current Troop Count: " + troop_count_label);
    }

    public void start_final_part() {
        // starts the final part of the game where troops are relocated
        Client.game_part = "relocate_troops";
        messageBox.setText("Relocate your troops by clicking on your regions from the list.");
        chooseButton.setText("END TURN");
        chooseButton.setEnabled(true);
    }

    public void start_second_part() {
        //starts the part of the game where the troops are distributed to player's regions
        setCheckBoxesVisible(false);
        load_region_list();
        Client.game_part = "locate_troops";
        setTroop_count_label(cli.total_troop_count + "");
        messageBox.setText("Locate your troops by clicking on your regions from the list.");
        chooseButton.setText("NEXT");
        chooseButton.setEnabled(true);
    }

    public void second_turn() {
        //after the first attack and relocate session, starts the second turn 
        chooseButton.setText("NEXT");
        chooseButton.setEnabled(true);
        setCheckBoxesVisible(false);
        load_region_list();
        Client.game_part = "second_locate_troops";
        cli.total_troop_count += 10;
        setTroop_count_label(cli.total_troop_count + "");
        messageBox.setText("Locate your troops by clicking on your regions from the list.");
        chooseButton.setText("NEXT");
        chooseButton.setEnabled(true);

    }

    public void finish_game(String winner) {
        //finishes the game and sends info to pair client
        setMessageBox("Winner is " + winner);
        SendMessage newMsg = new SendMessage("game_over");
        this.cli.sendMessage(newMsg.toString());

    }

    public void start_attack_part() {
        //starts attack part where the player can choose a region to attack
        Client.game_part = "attack_part";
        load_region_list();

        setMessageBox("Choose one of your regions' neighbours to attack");
        chooseButton.setText("ATTACK");
        chooseButton.setEnabled(true);
        pass_button.setEnabled(true);
        pass_button.setVisible(true);
    }

    public void defend(String info) {
        //when the player is attacked starts the defend part to choose defending troop count

        chooseButton.setEnabled(true);

        load_region_list();
        String[] split_info = info.split(",");

        if (!split_info[0].equals("null")) {
            String attackedRegionName = split_info[0];
            String attackingRegionName = split_info[2];
            attacked_troop_count = Integer.parseInt(split_info[1]);

            for (Region r : this.cli.board.getRegions()) {

                if (attackedRegionName.equals(r.getName())) {
                    attacked_region = r;
                }
                if (attackingRegionName.equals(r.getName())) {
                    attacking_region = r;
                }

            }

            setMessageBox("<html>Region " + attackedRegionName + " is under attack from Region " + attackingRegionName + " with " + attacked_troop_count + " troops."
                    + "<br/>Choose number of defending troops.</html>");
            chooseButton.setText("DEFEND");
            Client.game_part = "defending";
            setCheckBoxesVisible(true);
        } else {
            Client.game_part = "locate_troops";
            System.out.println("Saldırılmadı");

        }

    }

    void setCheckBoxesVisible(boolean b) {
        jCheckBox1.setVisible(b);
        jCheckBox2.setVisible(b);
        if (!Client.game_part.equals("defending")) {
            jCheckBox3.setVisible(b);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Game;
    private javax.swing.JPanel MainMenu;
    public javax.swing.JButton chooseButton;
    private javax.swing.ButtonGroup count_boxes;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel main_menu_message;
    public static javax.swing.JLabel messageBox;
    private javax.swing.JButton pairButton;
    private javax.swing.JTextField pair_text;
    private javax.swing.JButton pass_button;
    private javax.swing.JList<String> regionList;
    public javax.swing.JButton start_button;
    private javax.swing.JLabel troop_count_label;
    private javax.swing.JLabel your_id;
    // End of variables declaration//GEN-END:variables
}
